name: Provision the server

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      TF_FORCE_LOCAL_BACKEND: 1
      TF_VAR_ssh_key_name: ${{ vars.SSH_KEY_NAME }}
      TF_VAR_size: ${{ vars.SIZE }}
      TF_VAR_name: ${{ vars.NAME }}
      TF_VAR_apex_domain: ${{ vars.APEX_DOMAIN }}
      TF_VAR_subdomain: ${{ vars.SUBDOMAIN }}
      TF_VAR_admin_ips: ${{ vars.ADMIN_IPS_CSV }}
      DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
      TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_VAR_pvt_key: ${{ secrets.SSH_PRIV_KEY }}
      TF_TOKEN_app_terraform_io: ${{ secrets.HCP_TERRAFORM_TOKEN }}
    defaults:
      run:
        working-directory: terraform-infra/game_server
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_API_TOKEN }}

      - name: Public IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Whitelist runner Ip
        id: whitelist-ip
        run: |
          doctl compute firewall create \
            --name "factorio-whitelist-runner" \
            --inbound-rules "protocol:tcp,ports:22,address:${{ steps.ip.outputs.ipv4 }}/32" \
            --tag-names "factorio"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        run: terraform plan -no-color

      - name: Terraform Apply
        run: terraform apply -no-color --auto-approve

      - name: Run Ansible playbook
        uses: dawidd6/action-ansible-playbook@v2.8.0
        with:
          playbook: setup.yaml
          directory: ansible
          key: ${{ secrets.SSH_PRIV_KEY }}
          options: |
            --inventory inventory_digitalocean.yaml
            --extra-vars "ssh_pub_keys=${{ vars.SSH_PUB_KEYS }}"

      - name: Un-whitelist runner Ip
        if: ${{ always() && steps.whitelist-ip.outcome == 'success' }}
        run: |
          doctl compute firewall delete -f \
            $(doctl compute firewall list --format ID,Name --output json | jq -r '.[] | select(.name == "factorio-whitelist-runner") | .id')
